<?php
namespace {{ namespace }};

use {{ model_namespace }};
use {{ service_namespace }};
use {{ resource_namespace }};
use {{ request_namespace }}\Create{{ class }}Request;
use {{ request_namespace }}\Update{{ class }}Request;
use App\Http\Controllers\Controller;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Resources\Json\AnonymousResourceCollection;

/**
 * @openapi
 * /api/{{ route_prefix }}:
 *   get:
 *     tags: ["{{ class }}"]
 *     summary: List all {{ route_prefix }}
 *     parameters:
 *       - name: filter
 *         in: query
 *         description: Filter parameters
 *         schema:
 *           type: object
 *     responses:
 *       200:
 *         description: Success
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 data:
 *                   type: array
 *                   items:
 *                     $ref: '#/components/schemas/{{ class }}'
 *
 *   post:
 *     tags: ["{{ class }}"]
 *     summary: Create new {{ class }}
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *                 {{ request_properties }}
 *     responses:
 *       201:
 *         description: Created successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 data:
 *                   $ref: '#/components/schemas/{{ class }}'
 *
 * /api/{{ route_prefix }}/{id}:
 *   get:
 *     tags: ["{{ class }}"]
 *     summary: Get specific {{ class }}
 *     parameters:
 *       - name: id
 *         in: path
 *         required: true
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: Success
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 data:
 *                   $ref: '#/components/schemas/{{ class }}'
 *
 *   put:
 *     tags: ["{{ class }}"]
 *     summary: Update {{ class }}
 *     parameters:
 *       - name: id
 *         in: path
 *         required: true
 *         schema:
 *           type: integer
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *                 {{ request_properties }}
 *     responses:
 *       200:
 *         description: Updated successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 data:
 *                   $ref: '#/components/schemas/{{ class }}'
 *
 *   delete:
 *     tags: ["{{ class }}"]
 *     summary: Delete {{ class }}
 *     parameters:
 *       - name: id
 *         in: path
 *         required: true
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: Deleted successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: {{ class }} deleted successfully
 */
class {{ class }}Controller extends Controller
{
    protected $service;

    public function __construct({{ class }}Service $service)
    {
        $this->service = $service;
        {{ middleware }}
    }
    {{ permissions }}

    public function index(): AnonymousResourceCollection
    {
        $data = $this->service->getAll(request()->all());
        return {{ class }}Resource::collection($data);
    }

    public function show(int $id): {{ class }}Resource
    {
        $data = $this->service->find($id);
        return new {{ class }}Resource($data);
    }

    public function store(Create{{ class }}Request $request): {{ class }}Resource
    {
        $data = $this->service->create($request->validated());
        return new {{ class }}Resource($data);
    }

    public function update(Update{{ class }}Request $request, int $id): {{ class }}Resource
    {
        $data = $this->service->update($id, $request->validated());
        return new {{ class }}Resource($data);
    }

    public function destroy(int $id): JsonResponse
    {
        $this->service->delete($id);
        return response()->json(['message' => '{{ class }} deleted successfully']);
    }
}
