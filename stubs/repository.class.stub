<?php

namespace {{ namespace }};

use {{ model_namespace }};
use {{ namespace }}\Interfaces\{{ class }}RepositoryInterface;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Database\Eloquent\Model;

class {{ class }}Repository implements {{ class }}RepositoryInterface
{
    protected $model;

    public function __construct({{ class }} $model)
    {
        $this->model = $model;
    }

    public function all(array $filters = []): Collection
    {
        $query = $this->model->query();

        foreach ($filters as $field => $value) {
            if (is_array($value) && isset($value['from'], $value['to'])) {
                $query->whereBetween($field, [$value['from'], $value['to']]);
            } elseif (is_array($value)) {
                $query->whereIn($field, $value);
            } else {
                $query->where($field, $value);
            }
        }

        return $query->get();
    }

    public function find(int $id): Model
    {
        return $this->model->findOrFail($id);
    }

    public function create(array $data): Model
    {
        return $this->model->create($data);
    }

    public function update(int $id, array $data): Model
    {
        $record = $this->find($id);
        $record->update($data);
        return $record;
    }

    public function delete(int $id): bool
    {
        return $this->find($id)->delete();
    }
}
